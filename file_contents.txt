========== File: C:\Users\Kty\Desktop\Midterm\CM3035\wallet_api\manage.py ==========

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'wallet_api.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

==========================================

========== File: C:\Users\Kty\Desktop\Midterm\CM3035\wallet_api\setup.py ==========

import os
import subprocess
from django.contrib.auth.models import User

def install_dependencies():
    """Install required dependencies from requirements.txt."""
    print("Installing dependencies...")
    subprocess.run(["pip", "install", "-r", "requirements.txt"], check=True)

def apply_migrations():
    """Apply Django migrations."""
    print("Applying migrations...")
    subprocess.run(["python", "manage.py", "migrate"], check=True)

def load_initial_data():
    """Load initial data from CSV or fixtures."""
    print("Loading initial data...")
    subprocess.run(["python", "manage.py", "load_data"], check=True)

def create_superuser():
    """Create a Django superuser."""
    print("Creating superuser...")
    try:
        User.objects.create_superuser("admin", "admin@example.com", "admin123!!!")
        print("Superuser created successfully.")
    except Exception as e:
        print(f"Superuser creation failed: {e}")

def run_server():
    """Run the Django development server."""
    print("Starting the development server...")
    subprocess.run(["python", "manage.py", "runserver"], check=True)

if __name__ == "__main__":
    install_dependencies()
    apply_migrations()
    load_initial_data()
    create_superuser()
    run_server()

==========================================

========== File: C:\Users\Kty\Desktop\Midterm\CM3035\wallet_api\transactions\__init__.py ==========


==========================================

========== File: C:\Users\Kty\Desktop\Midterm\CM3035\wallet_api\transactions\admin.py ==========

from django.contrib import admin
from .models import Transaction

@admin.register(Transaction)
class TransactionAdmin(admin.ModelAdmin):
    """
    Admin configuration for the Transaction model.

    Provides a user-friendly interface with filtering, searching, and display options
    to easily manage transaction records.
    """
    # Fields to display in the admin list view
    list_display = ('transaction_id', 'user_id', 'transaction_date', 'product_name', 'product_amount', 'payment_method')

    # Fields that can be used for searching
    search_fields = ('transaction_id', 'user_id', 'product_name', 'merchant_name')

    # Filters available in the sidebar
    list_filter = ('transaction_date', 'product_category', 'payment_method', 'transaction_status', 'location')

    # Read-only fields to prevent accidental edits for important attributes
    readonly_fields = ('transaction_id', 'transaction_date', 'merchant_name', 'product_amount')

    # Customize the ordering of records
    ordering = ('-transaction_date',)

    # Fieldsets for organizing the edit view
    fieldsets = (
        ("Basic Information", {
            'fields': ('transaction_id', 'user_id', 'transaction_date', 'product_name', 'product_category', 'merchant_name')
        }),
        ("Financial Details", {
            'fields': ('product_amount', 'transaction_fee', 'cashback', 'loyalty_points')
        }),
        ("Transaction Details", {
            'fields': ('payment_method', 'transaction_status', 'merchant_id', 'device_type', 'location')
        }),
    )

    # Add the ability to export selected records as CSV
    actions = ['export_as_csv']

    def export_as_csv(self, request, queryset):
        """
        Custom action to export selected transactions as a CSV file.
        """
        import csv
        from django.http import HttpResponse

        response = HttpResponse(content_type='text/csv')
        response['Content-Disposition'] = 'attachment; filename="transactions.csv"'

        writer = csv.writer(response)
        writer.writerow([field.name for field in Transaction._meta.fields])  # Write headers
        for transaction in queryset:
            writer.writerow([getattr(transaction, field.name) for field in Transaction._meta.fields])  # Write rows

        self.message_user(request, f"{queryset.count()} transactions exported successfully!")
        return response

    export_as_csv.short_description = "Export selected transactions as CSV"

==========================================

========== File: C:\Users\Kty\Desktop\Midterm\CM3035\wallet_api\transactions\apps.py ==========

from django.apps import AppConfig


class TransactionsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'transactions'

==========================================

========== File: C:\Users\Kty\Desktop\Midterm\CM3035\wallet_api\transactions\models.py ==========

from django.db import models

class Transaction(models.Model):
    """
    Represents a financial transaction in the wallet application.

    Attributes:
        transaction_id (str): Unique identifier for the transaction.
        user_id (str): Identifier for the user who performed the transaction.
        transaction_date (datetime): The date and time of the transaction.
        product_category (str): Category of the product involved in the transaction (e.g., "Food", "Travel").
        product_name (str): Name of the product or service purchased.
        merchant_name (str): Name of the merchant providing the product/service.
        product_amount (decimal): Total cost of the product/service.
        transaction_fee (decimal, optional): Any fees associated with the transaction.
        cashback (decimal, optional): Cashback received for the transaction.
        loyalty_points (int, optional): Loyalty points earned from the transaction.
        payment_method (str): The method used for payment (e.g., "Credit Card", "UPI").
        transaction_status (str): Status of the transaction (e.g., "Successful", "Pending").
        merchant_id (str, optional): Identifier for the merchant.
        device_type (str): Type of device used for the transaction (e.g., "iOS", "Android").
        location (str): Location where the transaction occurred.
    """
        
    transaction_id = models.CharField(max_length=100, unique=True)
    user_id = models.CharField(max_length=100)
    transaction_date = models.DateTimeField()
    product_category = models.CharField(max_length=100)
    product_name = models.CharField(max_length=200)
    merchant_name = models.CharField(max_length=200)
    product_amount = models.DecimalField(max_digits=10, decimal_places=2)
    transaction_fee = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    cashback = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    loyalty_points = models.IntegerField(null=True, blank=True)
    payment_method = models.CharField(max_length=50)
    transaction_status = models.CharField(max_length=50)
    merchant_id = models.CharField(max_length=100, null=True, blank=True)
    device_type = models.CharField(max_length=50)
    location = models.CharField(max_length=200)

    def __str__(self):
        return self.transaction_id

==========================================

========== File: C:\Users\Kty\Desktop\Midterm\CM3035\wallet_api\transactions\serializers.py ==========

from rest_framework import serializers
from .models import Transaction

class TransactionSerializer(serializers.ModelSerializer):
    class Meta:
        model = Transaction
        fields = '__all__'

==========================================

========== File: C:\Users\Kty\Desktop\Midterm\CM3035\wallet_api\transactions\tests.py ==========

from django.urls import reverse
from django.utils.timezone import now
from transactions.models import Transaction
from rest_framework import status
from rest_framework.test import APITestCase


class TransactionAPITest(APITestCase):
    def setUp(self):
        """Set up initial test data."""
        self.transaction1 = Transaction.objects.create(
            transaction_id="tx1",
            user_id="user1",
            transaction_date=now(),
            product_category="Electronics",
            product_name="Laptop",
            merchant_name="BestBuy",
            product_amount=1200.50,
            transaction_fee=10.50,
            cashback=20.00,
            loyalty_points=100,
            payment_method="Credit Card",
            transaction_status="Successful",
            merchant_id="m1",
            device_type="iOS",
            location="Urban",
        )

    def test_get_transactions(self):
        """Test retrieving all transactions."""
        url = reverse('transaction-list')  # Ensure the URL name matches 'transaction-list'
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)

    def test_create_transaction(self):
        """Test creating a new transaction."""
        url = reverse('transaction-list')  # Ensure the URL name matches 'transaction-list'
        payload = {
            "transaction_id": "tx2",
            "user_id": "user2",
            "transaction_date": now().isoformat(),
            "product_category": "Books",
            "product_name": "Fiction Novel",
            "merchant_name": "Amazon",
            "product_amount": 50.00,
            "transaction_fee": 1.50,
            "cashback": 0.50,
            "loyalty_points": 10,
            "payment_method": "UPI",
            "transaction_status": "Successful",
            "merchant_id": "m2",
            "device_type": "Web",
            "location": "Rural",
        }
        response = self.client.post(url, payload, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(Transaction.objects.count(), 2)

    def test_get_transaction_detail(self):
        """Test retrieving a single transaction by ID."""
        url = reverse('transaction-detail', args=[self.transaction1.id])
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['transaction_id'], "tx1")

    def test_update_transaction(self):
        """Test updating an existing transaction."""
        url = reverse('transaction-detail', args=[self.transaction1.id])
        payload = {
            "transaction_id": "tx1",
            "user_id": "user1",
            "transaction_date": self.transaction1.transaction_date.isoformat(),
            "product_category": "Electronics",
            "product_name": "Updated Laptop",
            "merchant_name": "BestBuy",
            "product_amount": 1500.00,
            "transaction_fee": 10.50,
            "cashback": 20.00,
            "loyalty_points": 150,
            "payment_method": "Credit Card",
            "transaction_status": "Successful",
            "merchant_id": "m1",
            "device_type": "iOS",
            "location": "Urban",
        }
        response = self.client.put(url, payload, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_delete_transaction(self):
        """Test deleting a transaction by ID."""
        url = reverse('transaction-detail', args=[self.transaction1.id])
        response = self.client.delete(url)
        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)

    def test_filter_transactions(self):
        """Test filtering transactions."""
        url = reverse('filter-transactions')  # Ensure the URL name matches 'filter-transactions'
        response = self.client.get(url, {'product_category': 'Electronics'})
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)

    def test_aggregate_by_user(self):
        """Test aggregating transactions."""
        url = reverse('aggregate-by-user')  # Ensure the URL name matches 'aggregate-by-user'
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_export_transactions(self):
        """Test exporting transactions."""
        url = reverse('export-transactions')  # Ensure the URL name matches 'export-transactions'
        response = self.client.get(url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertIn('text/csv', response['Content-Type'])

==========================================

========== File: C:\Users\Kty\Desktop\Midterm\CM3035\wallet_api\transactions\urls.py ==========

from django.urls import path
from .views import (
    TransactionList, 
    TransactionDetail, 
    FilterTransactionsView, 
    AggregateByUserView, 
    GroupedTransactionsView, 
    ExportTransactionsView
)

urlpatterns = [
    path('transactions/', TransactionList.as_view(), name='transaction-list'),
    path('transactions/<int:pk>/', TransactionDetail.as_view(), name='transaction-detail'),
    path('transactions/query/', FilterTransactionsView.as_view(), name='filter-transactions'),
    path('transactions/aggregate-by-user/', AggregateByUserView.as_view(), name='aggregate-by-user'),
    path('transactions/grouped/', GroupedTransactionsView.as_view(), name='grouped-transactions'),
    path('transactions/export/', ExportTransactionsView.as_view(), name='export-transactions'),
]

==========================================

========== File: C:\Users\Kty\Desktop\Midterm\CM3035\wallet_api\transactions\views.py ==========

from django.db.models import Sum
from rest_framework.views import APIView
from rest_framework.pagination import PageNumberPagination
from rest_framework.generics import ListAPIView
from rest_framework.response import Response
from rest_framework import status
from .models import Transaction
from .serializers import TransactionSerializer
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi
import csv
from django.http import HttpResponse


class TransactionList(APIView):
    @swagger_auto_schema(
        operation_description="Retrieve a list of all transactions",
        responses={200: TransactionSerializer(many=True)}
    )
    def get(self, request):
        transactions = Transaction.objects.all()
        serializer = TransactionSerializer(transactions, many=True)
        return Response(serializer.data)

    @swagger_auto_schema(
        operation_description="Create a new transaction",
        request_body=TransactionSerializer,
        responses={201: TransactionSerializer, 400: "Invalid Data"}
    )
    def post(self, request):
        serializer = TransactionSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class TransactionDetail(APIView):
    @swagger_auto_schema(
        operation_description="Retrieve a single transaction by ID",
        responses={200: TransactionSerializer}
    )
    def get(self, request, pk):
        transaction = Transaction.objects.get(pk=pk)
        serializer = TransactionSerializer(transaction)
        return Response(serializer.data)

    @swagger_auto_schema(
        operation_description="Update a transaction by ID",
        request_body=TransactionSerializer,
        responses={200: TransactionSerializer, 400: "Invalid Data"}
    )
    def put(self, request, pk):
        transaction = Transaction.objects.get(pk=pk)
        serializer = TransactionSerializer(transaction, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    @swagger_auto_schema(
        operation_description="Delete a transaction by ID",
        responses={204: "No Content"}
    )
    def delete(self, request, pk):
        transaction = Transaction.objects.get(pk=pk)
        transaction.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)


class FilterTransactionsView(APIView):
    @swagger_auto_schema(
        operation_description="Filter transactions by date range, category, merchant, or payment method",
        manual_parameters=[
            openapi.Parameter('start_date', openapi.IN_QUERY, description="Start date (YYYY-MM-DD)", type=openapi.TYPE_STRING),
            openapi.Parameter('end_date', openapi.IN_QUERY, description="End date (YYYY-MM-DD)", type=openapi.TYPE_STRING),
            openapi.Parameter('product_category', openapi.IN_QUERY, description="Product category", type=openapi.TYPE_STRING),
            openapi.Parameter('merchant_name', openapi.IN_QUERY, description="Merchant name (partial matches allowed)", type=openapi.TYPE_STRING),
            openapi.Parameter('payment_method', openapi.IN_QUERY, description="Payment method", type=openapi.TYPE_STRING),
        ],
        responses={200: TransactionSerializer(many=True)}
    )
    def get(self, request):
        queryset = Transaction.objects.all()
        start_date = request.query_params.get('start_date')
        end_date = request.query_params.get('end_date')
        product_category = request.query_params.get('product_category')
        merchant_name = request.query_params.get('merchant_name')
        payment_method = request.query_params.get('payment_method')

        if start_date and end_date:
            queryset = queryset.filter(transaction_date__range=[start_date, end_date])
        if product_category:
            queryset = queryset.filter(product_category=product_category)
        if merchant_name:
            queryset = queryset.filter(merchant_name__icontains=merchant_name)
        if payment_method:
            queryset = queryset.filter(payment_method=payment_method)

        serializer = TransactionSerializer(queryset, many=True)
        return Response(serializer.data)


class AggregateByUserView(APIView):
    @swagger_auto_schema(
        operation_description="Aggregate total spending by each user",
        responses={200: "Aggregated data showing user_id and total spending"}
    )
    def get(self, request):
        aggregated_data = Transaction.objects.values('user_id').annotate(
            total_spent=Sum('product_amount')
        ).order_by('-total_spent')
        return Response(aggregated_data)


class GroupedTransactionsView(APIView):
    @swagger_auto_schema(
        operation_description="Group transactions by location and merchant, with total spending",
        responses={200: openapi.Schema(
            type=openapi.TYPE_ARRAY,
            items=openapi.Schema(
                type=openapi.TYPE_OBJECT,
                properties={
                    'location': openapi.Schema(type=openapi.TYPE_STRING, description="Location of transaction"),
                    'merchant_name': openapi.Schema(type=openapi.TYPE_STRING, description="Merchant name"),
                    'total_spent': openapi.Schema(type=openapi.TYPE_NUMBER, description="Total amount spent"),
                }
            )
        )}
    )
    def get(self, request):
        grouped_data = Transaction.objects.values('location', 'merchant_name').annotate(
            total_spent=Sum('product_amount')
        ).order_by('-total_spent')
        return Response(grouped_data)
    

class PaginatedTransactionsView(ListAPIView):
    queryset = Transaction.objects.all()
    serializer_class = TransactionSerializer
    pagination_class = PageNumberPagination

    @swagger_auto_schema(
        operation_description="Retrieve paginated transactions",
        responses={200: TransactionSerializer(many=True)}
    )
    def get(self, request, *args, **kwargs):
        return super().get(request, *args, **kwargs)


class ExportTransactionsView(APIView):
    @swagger_auto_schema(
        operation_description="Export all transactions to a CSV file",
        responses={200: "CSV file containing transaction data"},
        security=[{"Bearer": []}]  # Add security schema for token-based authentication
    )
    def get(self, request):
        # Set content type and headers for CSV response
        response = HttpResponse(content_type='text/csv')
        response['Content-Disposition'] = 'attachment; filename="transactions.csv"'

        # Write the CSV data
        writer = csv.writer(response)
        writer.writerow(['Transaction ID', 'User ID', 'Product Category', 'Amount', 'Date'])
        for transaction in Transaction.objects.all():
            writer.writerow([
                transaction.transaction_id,
                transaction.user_id,
                transaction.product_category,
                transaction.product_amount,
                transaction.transaction_date
            ])

        return response

==========================================

========== File: C:\Users\Kty\Desktop\Midterm\CM3035\wallet_api\transactions\management\__init__.py ==========


==========================================

========== File: C:\Users\Kty\Desktop\Midterm\CM3035\wallet_api\transactions\management\commands\__init__.py ==========


==========================================

========== File: C:\Users\Kty\Desktop\Midterm\CM3035\wallet_api\transactions\management\commands\load_data.py ==========

from django.core.management.base import BaseCommand
from django.conf import settings
from transactions.models import Transaction
import csv
import os

class Command(BaseCommand):
    """
    Management command to load transaction data from a CSV file into the database.

    This script checks for duplicate `transaction_id` entries before inserting records 
    to avoid violating the unique constraint.
    """
    help = 'Load transaction data from a CSV file into the database'

    def handle(self, *args, **kwargs):
        """
        Main entry point for the command. Reads the CSV file, processes each row,
        and inserts the data into the database while ensuring no duplicates are created.
        """
        # Construct the full path to the CSV file
        csv_file_path = os.path.join(settings.BASE_DIR, 'data', 'digital_wallet_transactions.csv')

        # Verify if the file exists
        if not os.path.exists(csv_file_path):
            self.stderr.write(f"File not found: {csv_file_path}")
            return

        self.stdout.write(f"Loading data from: {csv_file_path}")

        # Open and read the CSV file
        try:
            with open(csv_file_path, mode='r') as file:
                reader = csv.DictReader(file)
                added_count = 0
                skipped_count = 0

                # Process each row in the CSV file
                for row in reader:
                    # Check for duplicates based on transaction_id
                    if not Transaction.objects.filter(transaction_id=row['transaction_id']).exists():
                        Transaction.objects.create(
                            transaction_id=row['transaction_id'],
                            user_id=row['user_id'],
                            transaction_date=row['transaction_date'],
                            product_category=row['product_category'],
                            product_name=row['product_name'],
                            merchant_name=row['merchant_name'],
                            product_amount=row['product_amount'],
                            transaction_fee=row.get('transaction_fee', None),
                            cashback=row.get('cashback', None),
                            loyalty_points=row.get('loyalty_points', None),
                            payment_method=row['payment_method'],
                            transaction_status=row['transaction_status'],
                            merchant_id=row.get('merchant_id', None),
                            device_type=row['device_type'],
                            location=row['location'],
                        )
                        added_count += 1
                    else:
                        # Log skipped entries
                        self.stdout.write(f"Skipped duplicate transaction_id: {row['transaction_id']}")
                        skipped_count += 1

                # Print a summary of the operation
                self.stdout.write(f"Data loading completed. {added_count} records added, {skipped_count} duplicates skipped.")

        except Exception as e:
            # Handle unexpected errors gracefully
            self.stderr.write(f"An error occurred: {str(e)}")

==========================================

========== File: C:\Users\Kty\Desktop\Midterm\CM3035\wallet_api\transactions\migrations\__init__.py ==========


==========================================

========== File: C:\Users\Kty\Desktop\Midterm\CM3035\wallet_api\transactions\migrations\0001_initial.py ==========

# Generated by Django 5.1.4 on 2024-12-24 16:31

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_id', models.CharField(max_length=100, unique=True)),
                ('user_id', models.CharField(max_length=100)),
                ('transaction_date', models.DateTimeField()),
                ('product_category', models.CharField(max_length=100)),
                ('product_name', models.CharField(max_length=200)),
                ('merchant_name', models.CharField(max_length=200)),
                ('product_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('transaction_fee', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('cashback', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('loyalty_points', models.IntegerField(blank=True, null=True)),
                ('payment_method', models.CharField(max_length=50)),
                ('transaction_status', models.CharField(max_length=50)),
                ('merchant_id', models.CharField(blank=True, max_length=100, null=True)),
                ('device_type', models.CharField(max_length=50)),
                ('location', models.CharField(max_length=200)),
            ],
        ),
    ]

==========================================

========== File: C:\Users\Kty\Desktop\Midterm\CM3035\wallet_api\wallet_api\__init__.py ==========


==========================================

========== File: C:\Users\Kty\Desktop\Midterm\CM3035\wallet_api\wallet_api\asgi.py ==========

"""
ASGI config for wallet_api project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'wallet_api.settings')

application = get_asgi_application()

==========================================

========== File: C:\Users\Kty\Desktop\Midterm\CM3035\wallet_api\wallet_api\settings.py ==========

"""
Django settings for wallet_api project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-vm8+1n_lis*hr=&vg%cr0t@2xu$0!6=6)3*50-9z1o##6f=r=h'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []
USE_TZ = False

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'transactions',
    'drf_yasg',
    'rest_framework',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'wallet_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'wallet_api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

==========================================

========== File: C:\Users\Kty\Desktop\Midterm\CM3035\wallet_api\wallet_api\urls.py ==========

"""
URL configuration for wallet_api project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include  # Add 'include' here
from rest_framework import permissions
from drf_yasg.views import get_schema_view
from drf_yasg import openapi

schema_view = get_schema_view(
    openapi.Info(
        title="Wallet API",
        default_version='v1',
        description="API documentation for Wallet Transactions",
        contact=openapi.Contact(email="your-email@example.com"),
    ),
    public=True,
    permission_classes=(permissions.AllowAny,),
)

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('transactions.urls')),
    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc')
]

==========================================

========== File: C:\Users\Kty\Desktop\Midterm\CM3035\wallet_api\wallet_api\wsgi.py ==========

"""
WSGI config for wallet_api project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'wallet_api.settings')

application = get_wsgi_application()

==========================================

